-- Proyecto :LECTORETIN
-- Integrantes: Abel Luciano Aragon Alvaro y Carlos Mijail Mamani Anccasi

class Asignatura
    --types
    --Hora = nat * nat;
    --String = seq of char;
    instance variables
    nombreAsignatura: seq of char;
    horaInicio: nat * nat;
    horaFin: nat * nat;

    operations
    public Asignatura: seq of char * (nat * nat) * (nat * nat) ==> Asignatura
    Asignatura(na, hi, hf) ==
      (nombreAsignatura := na;
       horaInicio := hi;
       horaFin := hf;
       return self)
    pre len(na) > 0;

end Asignatura 

class EstudianteRetina

    --types
    --String = seq of char;

    instance variables
    nombre: seq of char;
    dni: seq of char;
    semestre: seq of char;
    asignaturas: set of Asignatura

    operations
    public EstudianteRetina: seq of char * seq of char * seq of char ==> EstudianteRetina
    EstudianteRetina(n, d, s) ==
      (nombre := n;
       dni := d;
       semestre := s;
       asignaturas := {};
       return self)
    pre len(n) > 0 and len(d) > 0 and len(s) > 0;

end EstudianteRetina

-- Revisar
class LectorRetina 

    instance variables
    retina: EstudianteRetina; -- Aqui el verficador de tipos

    operations
    public LectorRetina: EstudianteRetina ==> LectorRetina
    LectorRetina(estudiante) ==
      (retina := estudiante;
       return self;)
    pre estudiante <> nil;

end LectorRetina

class Sistema 
    
    instance variables
    lectorRetina: set of LectorRetina;

    operations
    public Sistema: () ==> Sistema
    Sistema() ==
      (lectorRetina := {};
       return self);

    public actualizarRetinas: () ==> ()
    actualizarRetinas() ==
      /* Lógica para actualizar las retinas de los estudiantes, por ejemplo,
         consultar una base de datos de estudiantes y actualizar la información. */
      skip;

    public guardarRetinas: () ==> ()
    guardarRetinas() ==
      /* Lógica para guardar la información de las retinas en un sistema de almacenamiento, 
         por ejemplo, una base de datos o un archivo. */
      skip;


end Sistema

class Alarma

    instance variables
    activada: bool

    operations
    public Alarma: () ==> Alarma
    Alarma() ==
      (activada := false;
       return self);

    public activar: () ==> ()
    activar() ==
      (activada := true);

    public desactivar: () ==> ()
    desactivar() ==
      (activada := false);

end Alarma

class Docente

    --types
    --String = seq of char;

    instance variables
    nombre: seq of char;
    dni: seq of char;

    operations
    public Docente: seq of char * seq of char ==> Docente
    Docente(n, d) ==
      (nombre := n;
       dni := d;
       return self)
    pre len(n) > 0 and len(d) = 8;

end Docente

class RegistroAsistencia
    --types
    --Fecha = nat1 * nat1 * nat1;
    instance variables
    codigo: nat;
    semestre: nat1;
    fecha: nat1 * nat1 * nat1;
    docente: Docente;
    asignatura: Asignatura;

    operations
    public RegistroAsistencia: nat * nat1 * (nat1 * nat1 * nat1) * Docente * Asignatura ==> RegistroAsistencia
    RegistroAsistencia(cod, sem, fec, d, a) ==
      (codigo := cod;
       semestre := sem;
       fecha := fec;
       docente := d;
       asignatura := a;
       return self)
    pre cod > 0;
    
end RegistroAsistencia



class TestCases

instance variables
  alarma: Alarma;
  docente: Docente;
  sistema: Sistema;
  asignatura: Asignatura;
  lectorRetina: LectorRetina;
  estudianteRetina: EstudianteRetina;
  registroAsistencia: RegistroAsistencia;

operations

  public TestCases: () ==> TestCases
  TestCases() ==
    (
      -- Crear instancia de Alarma y probar sus métodos
      alarma := new Alarma();
      alarma.activar();
      alarma.desactivar();

      -- Crear instancia de Docente
      docente := new Docente("Juan Perez", "12345678");

      -- Crear instancia de Sistema y probar sus métodos
      sistema := new Sistema();
      sistema.actualizarRetinas();
      sistema.guardarRetinas();

      -- Crear instancia de Asignatura
      asignatura := new Asignatura("Matemáticas", mk_(8, 0), mk_(10, 0));

      -- Crear instancia de EstudianteRetina
      estudianteRetina := new EstudianteRetina("Ana Gomez", "87654321", "2023-I");

      -- Crear instancia de LectorRetina
      lectorRetina := new LectorRetina(estudianteRetina);

      -- Crear instancia de RegistroAsistencia
      registroAsistencia := new RegistroAsistencia(1, 1, mk_(2024, 5, 28), docente, asignatura);
      
      return self
    );

end TestCases
